/*
 * Copyright (c) 2022 Application Library Engineering Group.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import {FAB_extended, FAB_regular, FabType, FabExtendedModel, FabRegularModel} from '@ohos/material-fab'

@Entry
@Component
struct ListExample {
  model_small : FabRegularModel.Model = new FabRegularModel.Model().setFabType(FabType.small)
  model_medium : FabRegularModel.Model = new FabRegularModel.Model()
  model_large : FabRegularModel.Model = new FabRegularModel.Model().setFabType(FabType.large)
  model_extended : FabExtendedModel.Model = new FabExtendedModel.Model()

  aboutToAppear() {
    this.model_small.setPosition({x : 20, y : 30})
    this.model_small.setBackgroundColor(Color.Green)

    this.model_medium.setPosition({x : 290, y : 30})
    this.model_medium.setBackgroundColor(Color.Red)

    this.model_large.setPosition({x : 250, y : 630})
    this.model_large.setBackgroundColor(Color.Orange)

    this.model_extended.setPosition({x : 20, y : 630}).setFabIcon($r('app.media.add_icon'))
    this.model_small.setBackgroundColor(Color.Green)
  }

  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  @State editFlag: boolean = false
  @State count : number = 1

  build() {
    Column() {
      Column() {
        List({ space: 20, initialIndex: 0 }) {
          ForEach(this.arr, (item) => {
            ListItem() {
              Text('' + item)
                .width('100%').height(100).fontSize(16)
                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF)
            }.editable(true)
          }, item => item)
        }
        .listDirection(Axis.Vertical) //Arrangement direction
        .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // Divider line
        .edgeEffect(EdgeEffect.None) // No effect when sliding to the edge
        .chainAnimation(false) // Chained animations are disabled.
        .onScrollIndex((firstIndex: number, lastIndex: number) => {
          console.info('first' + firstIndex)
          console.info('last' + lastIndex)
        })
        .editMode(this.editFlag)
        .onItemDelete((index: number) => {
          console.info(this.arr[index] + 'Delete')
          this.arr.splice(index, 1)
          console.info(JSON.stringify(this.arr))
          this.editFlag = false
          return true
        }).width('90%')
      }.width('100%')

      FAB_regular({
        model : this.model_small,
        onClick : (event) => {
          AlertDialog.show({ message: 'You clicked small fab' })
        }
      })

      FAB_regular({
        model : this.model_medium,
        onClick : (event) => {
          AlertDialog.show({ message: 'You clicked medium fab' })
        }
      })

      FAB_regular({
        model : this.model_large,
        onClick : (event) => {
          AlertDialog.show({ message: 'You clicked large fab' })
        }
      })

      FAB_extended({
        model : this.model_extended,
        onClick : (event) => {
          AlertDialog.show({ message: 'You clicked extended fab' })
        }
      })


    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 })
  }
}
